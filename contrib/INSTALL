
Packages needed:
 lame libboost-dev libsamplerate-dev libicu-dev = demosauce

 Pillow (python imaging library) - check that libjpeg and libzlib is installed, otherwise you will miss jpeg / png support

Create python virtual environment:
 Install pip (python package install program)
 Install virtualenv (can use "pip install virtualenv" if you want)
 To ceate virtual env : pip install -E demovibesenv -U -r demovibes/contrib/requirements.txt
 To activate virt env : source demovibesenv/bin/activate

Look over / change settings
 -Check settings.py
 -Copy the settings_local.py file from contrib to the demovibes folder & configure for your site:
    -Override secret key
    -check mail settings
    -Complete django setting reference : http://docs.djangoproject.com/en/1.3/ref/settings/
 - Copy the uwsgi-events-local.py file from contrib into the uwsgi_events folder and modify to fit your sites needs.
 - Copy the uwsgi-local.py file from contrib into demovibes folder and adjust for your site accordingly.

Initialize database:
 -change directory to demovibes
 -Activate your virtual environment (if used)
 -run "python manage.py syncdb --all" - Install all tables,
 -run "python manage.py migrate --fake" - Tell south to mark all migrations as "done"

web config:
 -directory /static/ -> to demovibes/static folder
 -directory /media/ -> to django/contrib/admin/media folder (depends on where django was installed)
 -(easiest) "python manage.py runfcgi host=127.0.0.1 port=9999" and point / to fastcgi server in webserver.
  -Increase timeout for fastcgi to 500s at least.. (for event system)

streaming:
 -install icecast2
 -change demosauce.conf
 -add "djrandom" user
 -start sockulf.py
 -start demosauce

Other stuff:
 -for mysql support you need to have mysql dev packages installed, and run "pip install MySQL-python"
 -Similar for postgresql, the pip package is called "psycopg2"
 -Installing memcached and set it up as a cache for django is highly recommended
 
uWSGI : Latest version probbably wont work. V0.9.5.4 preferred. To fix compilation issues on newer 
Linux installations even without -Werror (Debian9/Ubuntu 18), change line 58 to the following instead:

from:
cflags = ['-Wall','-Werror', '-D_LARGEFILE_SOURCE', '-D_FILE_OFFSET_BITS=64'] + os.environ.get("CFLAGS", "").split()

to:
cflags = ['-Wall', '-D__clang__', '-D_LARGEFILE_SOURCE', '-D_FILE_OFFSET_BITS=64'] + os.environ.get("CFLAGS", "").split()

Thanks to Greg Kennedy for the fix.
For Ubuntu14, just remove the -Werror reference.
